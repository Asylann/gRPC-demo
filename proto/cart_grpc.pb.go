// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/cart.proto

package calculatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CartService_CreateCart_FullMethodName                          = "/proto.CartService/CreateCart"
	CartService_AddToCart_FullMethodName                           = "/proto.CartService/AddToCart"
	CartService_GetCartByUserId_FullMethodName                     = "/proto.CartService/GetCartByUserId"
	CartService_GetItemsOfCartById_FullMethodName                  = "/proto.CartService/GetItemsOfCartById"
	CartService_DeleteItemFromCart_FullMethodName                  = "/proto.CartService/DeleteItemFromCart"
	CartService_GetEtagVersionByUserId_FullMethodName              = "/proto.CartService/GetEtagVersionByUserId"
	CartService_ChangeEtagVersionByUserId_FullMethodName           = "/proto.CartService/ChangeEtagVersionByUserId"
	CartService_DeleteCart_FullMethodName                          = "/proto.CartService/DeleteCart"
	CartService_DeleteProductOfCarts_FullMethodName                = "/proto.CartService/DeleteProductOfCarts"
	CartService_ChangeEtagVersionOfCartsByProductId_FullMethodName = "/proto.CartService/ChangeEtagVersionOfCartsByProductId"
)

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartServiceClient interface {
	CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartResponse, error)
	AddToCart(ctx context.Context, in *AddToCardRequest, opts ...grpc.CallOption) (*AddToCardResponse, error)
	GetCartByUserId(ctx context.Context, in *GetCartByUserIdRequest, opts ...grpc.CallOption) (*GetCartByUserIdResponse, error)
	GetItemsOfCartById(ctx context.Context, in *GetItemsOfCartByIdRequest, opts ...grpc.CallOption) (*GetItemsOfCartByIdResponse, error)
	DeleteItemFromCart(ctx context.Context, in *DeleteItemFromCartRequest, opts ...grpc.CallOption) (*DeleteItemFromCartResponse, error)
	GetEtagVersionByUserId(ctx context.Context, in *GetEtagVersionByUserIdRequest, opts ...grpc.CallOption) (*GetEtagVersionByUserIdResponse, error)
	ChangeEtagVersionByUserId(ctx context.Context, in *ChangeEtagVersionByUserIdRequest, opts ...grpc.CallOption) (*ChangeEtagVersionByUserIdResponse, error)
	DeleteCart(ctx context.Context, in *DeleteCartRequest, opts ...grpc.CallOption) (*DeleteCartResponse, error)
	DeleteProductOfCarts(ctx context.Context, in *DeleteProductOfCartsRequest, opts ...grpc.CallOption) (*DeleteProductOfCartsResponse, error)
	ChangeEtagVersionOfCartsByProductId(ctx context.Context, in *ChangeEtagVersionOfCartsByProductIdRequest, opts ...grpc.CallOption) (*ChangeEtagVersionOfCartsByProductIdResponse, error)
}

type cartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartServiceClient(cc grpc.ClientConnInterface) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCartResponse)
	err := c.cc.Invoke(ctx, CartService_CreateCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) AddToCart(ctx context.Context, in *AddToCardRequest, opts ...grpc.CallOption) (*AddToCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToCardResponse)
	err := c.cc.Invoke(ctx, CartService_AddToCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCartByUserId(ctx context.Context, in *GetCartByUserIdRequest, opts ...grpc.CallOption) (*GetCartByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartByUserIdResponse)
	err := c.cc.Invoke(ctx, CartService_GetCartByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetItemsOfCartById(ctx context.Context, in *GetItemsOfCartByIdRequest, opts ...grpc.CallOption) (*GetItemsOfCartByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemsOfCartByIdResponse)
	err := c.cc.Invoke(ctx, CartService_GetItemsOfCartById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) DeleteItemFromCart(ctx context.Context, in *DeleteItemFromCartRequest, opts ...grpc.CallOption) (*DeleteItemFromCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteItemFromCartResponse)
	err := c.cc.Invoke(ctx, CartService_DeleteItemFromCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetEtagVersionByUserId(ctx context.Context, in *GetEtagVersionByUserIdRequest, opts ...grpc.CallOption) (*GetEtagVersionByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEtagVersionByUserIdResponse)
	err := c.cc.Invoke(ctx, CartService_GetEtagVersionByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ChangeEtagVersionByUserId(ctx context.Context, in *ChangeEtagVersionByUserIdRequest, opts ...grpc.CallOption) (*ChangeEtagVersionByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeEtagVersionByUserIdResponse)
	err := c.cc.Invoke(ctx, CartService_ChangeEtagVersionByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) DeleteCart(ctx context.Context, in *DeleteCartRequest, opts ...grpc.CallOption) (*DeleteCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCartResponse)
	err := c.cc.Invoke(ctx, CartService_DeleteCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) DeleteProductOfCarts(ctx context.Context, in *DeleteProductOfCartsRequest, opts ...grpc.CallOption) (*DeleteProductOfCartsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductOfCartsResponse)
	err := c.cc.Invoke(ctx, CartService_DeleteProductOfCarts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ChangeEtagVersionOfCartsByProductId(ctx context.Context, in *ChangeEtagVersionOfCartsByProductIdRequest, opts ...grpc.CallOption) (*ChangeEtagVersionOfCartsByProductIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeEtagVersionOfCartsByProductIdResponse)
	err := c.cc.Invoke(ctx, CartService_ChangeEtagVersionOfCartsByProductId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServiceServer is the server API for CartService service.
// All implementations must embed UnimplementedCartServiceServer
// for forward compatibility.
type CartServiceServer interface {
	CreateCart(context.Context, *CreateCartRequest) (*CreateCartResponse, error)
	AddToCart(context.Context, *AddToCardRequest) (*AddToCardResponse, error)
	GetCartByUserId(context.Context, *GetCartByUserIdRequest) (*GetCartByUserIdResponse, error)
	GetItemsOfCartById(context.Context, *GetItemsOfCartByIdRequest) (*GetItemsOfCartByIdResponse, error)
	DeleteItemFromCart(context.Context, *DeleteItemFromCartRequest) (*DeleteItemFromCartResponse, error)
	GetEtagVersionByUserId(context.Context, *GetEtagVersionByUserIdRequest) (*GetEtagVersionByUserIdResponse, error)
	ChangeEtagVersionByUserId(context.Context, *ChangeEtagVersionByUserIdRequest) (*ChangeEtagVersionByUserIdResponse, error)
	DeleteCart(context.Context, *DeleteCartRequest) (*DeleteCartResponse, error)
	DeleteProductOfCarts(context.Context, *DeleteProductOfCartsRequest) (*DeleteProductOfCartsResponse, error)
	ChangeEtagVersionOfCartsByProductId(context.Context, *ChangeEtagVersionOfCartsByProductIdRequest) (*ChangeEtagVersionOfCartsByProductIdResponse, error)
	mustEmbedUnimplementedCartServiceServer()
}

// UnimplementedCartServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCartServiceServer struct{}

func (UnimplementedCartServiceServer) CreateCart(context.Context, *CreateCartRequest) (*CreateCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCart not implemented")
}
func (UnimplementedCartServiceServer) AddToCart(context.Context, *AddToCardRequest) (*AddToCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedCartServiceServer) GetCartByUserId(context.Context, *GetCartByUserIdRequest) (*GetCartByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartByUserId not implemented")
}
func (UnimplementedCartServiceServer) GetItemsOfCartById(context.Context, *GetItemsOfCartByIdRequest) (*GetItemsOfCartByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsOfCartById not implemented")
}
func (UnimplementedCartServiceServer) DeleteItemFromCart(context.Context, *DeleteItemFromCartRequest) (*DeleteItemFromCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemFromCart not implemented")
}
func (UnimplementedCartServiceServer) GetEtagVersionByUserId(context.Context, *GetEtagVersionByUserIdRequest) (*GetEtagVersionByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEtagVersionByUserId not implemented")
}
func (UnimplementedCartServiceServer) ChangeEtagVersionByUserId(context.Context, *ChangeEtagVersionByUserIdRequest) (*ChangeEtagVersionByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEtagVersionByUserId not implemented")
}
func (UnimplementedCartServiceServer) DeleteCart(context.Context, *DeleteCartRequest) (*DeleteCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCart not implemented")
}
func (UnimplementedCartServiceServer) DeleteProductOfCarts(context.Context, *DeleteProductOfCartsRequest) (*DeleteProductOfCartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductOfCarts not implemented")
}
func (UnimplementedCartServiceServer) ChangeEtagVersionOfCartsByProductId(context.Context, *ChangeEtagVersionOfCartsByProductIdRequest) (*ChangeEtagVersionOfCartsByProductIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEtagVersionOfCartsByProductId not implemented")
}
func (UnimplementedCartServiceServer) mustEmbedUnimplementedCartServiceServer() {}
func (UnimplementedCartServiceServer) testEmbeddedByValue()                     {}

// UnsafeCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServiceServer will
// result in compilation errors.
type UnsafeCartServiceServer interface {
	mustEmbedUnimplementedCartServiceServer()
}

func RegisterCartServiceServer(s grpc.ServiceRegistrar, srv CartServiceServer) {
	// If the following call pancis, it indicates UnimplementedCartServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CartService_ServiceDesc, srv)
}

func _CartService_CreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).CreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_CreateCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).CreateCart(ctx, req.(*CreateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_AddToCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddToCart(ctx, req.(*AddToCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCartByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCartByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetCartByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCartByUserId(ctx, req.(*GetCartByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetItemsOfCartById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsOfCartByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetItemsOfCartById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetItemsOfCartById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetItemsOfCartById(ctx, req.(*GetItemsOfCartByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_DeleteItemFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemFromCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).DeleteItemFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_DeleteItemFromCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).DeleteItemFromCart(ctx, req.(*DeleteItemFromCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetEtagVersionByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEtagVersionByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetEtagVersionByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetEtagVersionByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetEtagVersionByUserId(ctx, req.(*GetEtagVersionByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ChangeEtagVersionByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEtagVersionByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).ChangeEtagVersionByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_ChangeEtagVersionByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).ChangeEtagVersionByUserId(ctx, req.(*ChangeEtagVersionByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_DeleteCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).DeleteCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_DeleteCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).DeleteCart(ctx, req.(*DeleteCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_DeleteProductOfCarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductOfCartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).DeleteProductOfCarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_DeleteProductOfCarts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).DeleteProductOfCarts(ctx, req.(*DeleteProductOfCartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ChangeEtagVersionOfCartsByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEtagVersionOfCartsByProductIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).ChangeEtagVersionOfCartsByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_ChangeEtagVersionOfCartsByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).ChangeEtagVersionOfCartsByProductId(ctx, req.(*ChangeEtagVersionOfCartsByProductIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CartService_ServiceDesc is the grpc.ServiceDesc for CartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCart",
			Handler:    _CartService_CreateCart_Handler,
		},
		{
			MethodName: "AddToCart",
			Handler:    _CartService_AddToCart_Handler,
		},
		{
			MethodName: "GetCartByUserId",
			Handler:    _CartService_GetCartByUserId_Handler,
		},
		{
			MethodName: "GetItemsOfCartById",
			Handler:    _CartService_GetItemsOfCartById_Handler,
		},
		{
			MethodName: "DeleteItemFromCart",
			Handler:    _CartService_DeleteItemFromCart_Handler,
		},
		{
			MethodName: "GetEtagVersionByUserId",
			Handler:    _CartService_GetEtagVersionByUserId_Handler,
		},
		{
			MethodName: "ChangeEtagVersionByUserId",
			Handler:    _CartService_ChangeEtagVersionByUserId_Handler,
		},
		{
			MethodName: "DeleteCart",
			Handler:    _CartService_DeleteCart_Handler,
		},
		{
			MethodName: "DeleteProductOfCarts",
			Handler:    _CartService_DeleteProductOfCarts_Handler,
		},
		{
			MethodName: "ChangeEtagVersionOfCartsByProductId",
			Handler:    _CartService_ChangeEtagVersionOfCartsByProductId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cart.proto",
}
